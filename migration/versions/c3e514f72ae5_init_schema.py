"""Init schema

Revision ID: c3e514f72ae5
Revises: 
Create Date: 2023-03-22 16:06:15.496608

"""
import uuid

from alembic import op
import sqlalchemy as sa
from typing import Sequence, Union

from sqlalchemy import ARRAY, VARCHAR
from sqlalchemy.dialects.postgresql import JSONB, UUID
# revision identifiers, used by Alembic.
revision = 'c3e514f72ae5'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "blacklist_tokens",
        sa.Column("id", UUID(as_uuid=True), primary_key=True, default=uuid.uuid4(), nullable=False),
        sa.Column("token", sa.Text, nullable=False),
        sa.Column("created_at", sa.TIMESTAMP, server_default=sa.func.now(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP, server_default=sa.func.now(),
                  onupdate=sa.func.current_timestamp(), nullable=False),
        sa.Column("is_deleted", sa.BOOLEAN, nullable=False, default=False),
    )
    op.create_table(
        'users',
        sa.Column("id", UUID(as_uuid=True), primary_key=True, default=uuid.uuid4(), nullable=False),
        sa.Column("email", sa.String(255), unique=True, nullable=False),
        sa.Column("password", sa.String(255), unique=False, nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
        sa.Column("is_deleted", sa.BOOLEAN, nullable=False, default=False),
    )
    op.create_table(
        "owners",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", UUID(as_uuid=True), nullable=False, unique=True),
        sa.Column("name", sa.String(256), nullable=False),
        sa.Column("address", sa.String(256), nullable=False),
        sa.Column("garbageMass", sa.Integer, nullable=False),
        sa.Column("neighbourhood_id", UUID(as_uuid=True), nullable=True),
        sa.Column("group_id", UUID(as_uuid=True), nullable=True),
        sa.Column("price", sa.Float, nullable=True),
        sa.Column("state_id", UUID(as_uuid=True), nullable=True),
        sa.Column("force_id", UUID(as_uuid=True), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "forces",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", UUID(as_uuid=True), nullable=False, unique=True),
        sa.Column("name", sa.String(256), nullable=False),
        sa.Column("unit", sa.String(256), nullable=False),
        sa.Column("numberBarrel", sa.Integer, nullable=False),
        sa.Column("typeBarrel_id", UUID(as_uuid=True), nullable=True),
        sa.Column("position_id", UUID(as_uuid=True), nullable=True),
        sa.Column("worker", sa.Integer, nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "neighbourhoods",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", UUID(as_uuid=True), nullable=False, unique=True),
        sa.Column("name", sa.String(256), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "groups",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", UUID(as_uuid=True), nullable=False, unique=True),
        sa.Column("name", sa.String(256), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "type_barrels",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", UUID(as_uuid=True), nullable=False, unique=True),
        sa.Column("name", sa.String(256), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "positions",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", UUID(as_uuid=True), nullable=False, unique=True),
        sa.Column("name", sa.String(256), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "states",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", UUID(as_uuid=True), nullable=False, unique=True),
        sa.Column("name", sa.String(256), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_blacklist_tokens_id"), "blacklist_tokens", ["id"], unique=True)
    op.create_index(op.f("ix_blacklist_tokens_token"), "blacklist_tokens", ["token"], unique=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users")
    op.drop_table("owners")
    op.drop_table("forces")
    op.drop_table("neighbourhoods")
    op.drop_table("groups")
    op.drop_table("typeBarrels")
    op.drop_table("positions")
    op.drop_table("states")
    # ### end Alembic commands ###
